!function(){"use strict";angular.module("app",["ui.router","app.ui","ui.bootstrap"]).config(["$stateProvider","$urlRouterProvider",function(t,e){e.otherwise("/projects"),t.state("login",{url:"/login",templateUrl:"partials/login/index.html",controller:"LoginController",controllerAs:"loginController"}),t.state("projects",{url:"/projects",templateUrl:"partials/projects/index.html",controller:"ProjectsController",controllerAs:"projectsController",resolve:{projects:["Projects","users",function(t,e){return t.get()}],users:["Users",function(t){return t.get()}]}}).state("projects.detail",{url:"/:projectId",templateUrl:"partials/projects/detail.html",controller:"ProjectController",controllerAs:"projectController",resolve:{project:["Projects","$stateParams","projects",function(t,e,r){return t.find(e.projectId)}]}}).state("projects.detail.edit",{url:"/edit",templateUrl:"partials/projects/edit.html",controller:"ProjectEditController",controllerAs:"projectEditController"})}])}(),function(){"use strict";angular.module("app.ui",[])}(),function(){"use strict";angular.module("app").controller("BodyController",["Projects",function(t){var e=this;e.welcome="Sup",t.get().then(function(r){e.projects=t.projects})}])}(),function(){"use strict";angular.module("app.ui").directive("projectsTable",function(){return{restrict:"EA",templateUrl:"partials/directives/projects-table.html",scope:{projects:"=",remove:"="}}})}(),function(){"use strict";angular.module("app").factory("User",function(){function t(t){_.merge(this,{first_name:"",last_name:"",email:""},t||{})}return t.prototype={fullName:function(){return this.first_name+" "+this.last_name}},t})}(),function(){"use strict";angular.module("app").controller("LoginController",function(){})}(),function(){"use strict";angular.module("app").service("Projects",["$http","$state","Users",function(t,e,r){var o=this;o.projects=[],o.find=function(t){return _.find(o.projects,{_id:t})},o.get=function(){return t.get("/projects").then(function(t){return o.projects.splice(0),t.data.forEach(function(t){t.user=r.find(t.user),o.projects.push(t)}),o.projects})},o.put=function(r){var n={title:r.title,user:r.user._id};return t.put("/projects/"+r._id,n).then(function(t){var n=o.find(r._id);_.merge(n,r),e.go("projects.detail",{projectId:r._id})},function(t){})},o.remove=function(t){_.remove(o.projects,{_id:t})},o.del=function(r){return t["delete"]("/projects/"+r).then(function(t){o.remove(r),e.go("projects")})},o.post=function(e){return t.post("/projects/",e).then(function(t){t.data.user=r.find(t.data.user),o.projects.push(t.data)})}}])}(),function(){"use strict";angular.module("app").service("Users",["$http","User",function(t,e){var r=this;r.users=[],r.find=function(t){return _.find(r.users,{_id:t})},r.get=function(){return t.get("/users").then(function(t){return r.users.splice(0),t.data.forEach(function(t){r.users.push(new e(t))}),r.users})}}])}(),function(){"use strict";angular.module("app.ui").filter("niceDate",function(){return function(t,e){e=e||"MMMM Do, YYYY";var r=moment(t);return r.format(e)}})}(),function(){"use strict";angular.module("app").controller("NewProjectCtrl",["$scope","$modalInstance","Users",function(t,e,r){var o=this;o.users=r.users,o.project={user:""},o.close=function(){e.close(o.project)},o.dismiss=function(){e.dismiss()}}])}(),function(){"use strict";angular.module("app").controller("ProjectEditController",["project","Projects","Users",function(t,e,r){var o=this;o.users=r.users,o.project=t,o.projectCopy=_.clone(t),o.update=e.put}])}(),function(){"use strict";angular.module("app").controller("ProjectController",["project","Projects",function(t,e){var r=this;r.project=t,r.del=e.del}])}(),function(){"use strict";angular.module("app").controller("ProjectsController",["projects","Projects","$modal","$state","$rootScope",function(t,e,r,o,n){var s=this;s.projects=t,s.remove=e.del,s.addProject=function(t){r.open({templateUrl:"partials/projects/new.html",controller:"NewProjectCtrl",controllerAs:"newProject",size:"md"}).result.then(function(t){e.post(t)})}}])}();
//# sourceMappingURL=data:application/json;base64,
