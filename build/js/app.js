!function(){"use strict";angular.module("app",["ui.router","app.ui","ui.bootstrap"]).config(["$stateProvider","$urlRouterProvider","$httpProvider",function(t,e,r){e.otherwise("/projects"),t.state("login",{url:"/login",templateUrl:"partials/login/index.html",controller:"LoginController",controllerAs:"loginController"}).state("projects",{url:"/projects",templateUrl:"partials/projects/index.html",controller:"ProjectsController",controllerAs:"projectsController",resolve:{projects:["Projects","users",function(t,e){return t.get()}],users:["Users",function(t){return t.get()}]},data:{requiresLogin:!0}}).state("projects.detail",{url:"/:projectId",templateUrl:"partials/projects/detail.html",controller:"ProjectController",controllerAs:"projectController",resolve:{project:["Projects","$stateParams","projects",function(t,e,r){return t.find(e.projectId)}]},data:{requiresLogin:!0}}).state("projects.detail.edit",{url:"/edit",templateUrl:"partials/projects/edit.html",controller:"ProjectEditController",controllerAs:"projectEditController",data:{requiresLogin:!0}}),r.interceptors.push(["$injector",function(t){return{request:function(e){var r=t.get("Users");return r.isLoggedIn()&&(e.headers.Authorization="Token "+r.currentUserToken),e}}}])}]).run(["$rootScope","Users","$state",function(t,e,r){t.$on("$stateChangeStart",function(t,o){o.data&&o.data.requiresLogin&&(e.isLoggedIn()||(t.preventDefault(),r.go("login")))})}])}(),function(){"use strict";angular.module("app.ui",[])}(),function(){"use strict";angular.module("app").controller("BodyController",["Projects",function(t){var e=this;e.welcome="Sup",t.get().then(function(r){e.projects=t.projects})}])}(),function(){"use strict";angular.module("app.ui").directive("projectsTable",function(){return{restrict:"EA",templateUrl:"partials/directives/projects-table.html",scope:{projects:"=",remove:"="}}})}(),function(){"use strict";angular.module("app").factory("User",function(){function t(t){_.merge(this,{first_name:"",last_name:"",email:""},t||{})}return t.prototype={fullName:function(){return this.first_name+" "+this.last_name}},t})}(),function(){"use strict";angular.module("app").controller("LoginController",["Users","$state",function(t,e){var r=this;r.creds={},r.login=function(o){t.login(o).then(function(){e.go("projects")},function(t){r.loginFailed=!0})}}])}(),function(){"use strict";angular.module("app.ui").filter("niceDate",function(){return function(t,e){e=e||"MMMM Do, YYYY";var r=moment(t);return r.format(e)}})}(),function(){"use strict";angular.module("app").controller("NewProjectCtrl",["$scope","$modalInstance","Users",function(t,e,r){var o=this;o.users=r.users,o.project={user:""},o.close=function(){e.close(o.project)},o.dismiss=function(){e.dismiss()}}])}(),function(){"use strict";angular.module("app").controller("ProjectEditController",["project","Projects","Users",function(t,e,r){var o=this;o.users=r.users,o.project=t,o.projectCopy=_.clone(t),o.update=e.put}])}(),function(){"use strict";angular.module("app").controller("ProjectController",["project","Projects",function(t,e){var r=this;r.project=t,r.del=e.del}])}(),function(){"use strict";angular.module("app").controller("ProjectsController",["projects","Projects","$modal","Users",function(t,e,r,o){var n=this;n.projects=t,n.remove=e.del,n.currentUser=o.currentUser,n.addProject=function(t){r.open({templateUrl:"partials/projects/new.html",controller:"NewProjectCtrl",controllerAs:"newProject",size:"md"}).result.then(function(t){e.post(t)})}}])}(),function(){"use strict";angular.module("app").service("Projects",["$http","$state","Users",function(t,e,r){var o=this;o.projects=[],o.find=function(t){return _.find(o.projects,{_id:t})},o.get=function(){return t.get("/projects").then(function(t){return o.projects.splice(0),t.data.forEach(function(t){t.user=r.find(t.user),o.projects.push(t)}),o.projects})},o.put=function(r){var n={title:r.title,user:r.user._id};return t.put("/projects/"+r._id,n).then(function(t){var n=o.find(r._id);_.merge(n,r),e.go("projects.detail",{projectId:r._id})},function(t){})},o.remove=function(t){_.remove(o.projects,{_id:t})},o.del=function(r){return t["delete"]("/projects/"+r).then(function(t){o.remove(r),e.go("projects")})},o.post=function(e){return t.post("/projects/",e).then(function(t){t.data.user=r.find(t.data.user),o.projects.push(t.data)})}}])}(),function(){"use strict";angular.module("app").service("Users",["$http","User","$state",function(t,e,r){var o=this;o.currentUser=null,o.currentUserToken=null,o.users=[],o.find=function(t){return _.find(o.users,{_id:t})},o.get=function(){return t.get("/users").then(function(t){return o.users.splice(0),t.data.forEach(function(t){o.users.push(new e(t))}),o.users})},o.login=function(e){return t.post("/login",e).then(function(t){o.currentUser=t.data.user,o.currentUserToken=t.data.token})},o.isLoggedIn=function(){return!!o.currentUser}}])}();
//# sourceMappingURL=data:application/json;base64,
